/*  reacTIVision tangible interaction framework
	Copyright (C) 2005-2015 Martin Kaltenbrunner <martin@tuio.org>
 
	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.
 
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
 
	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef ONEEUROFILTER
#define ONEEUROFILTER

#include <iostream>
#include <stdexcept>
#include <cmath>
#include <ctime>

// -----------------------------------------------------------------
// Utilities

typedef double TimeStamp ; // in seconds
static const TimeStamp UndefinedTime = -1.0 ;

// -----------------------------------------------------------------

namespace TUIO {
	
	class LowPassFilter {
		
		double y, a, s ;
		bool initialized ;
		
		void setAlpha(double alpha);
	public:
		
		LowPassFilter(double alpha, double initval=0.0) {
			y = s = initval ;
			setAlpha(alpha) ;
			initialized = false ;
		}
		
		double filter(double value);
		double filterWithAlpha(double value, double alpha);
		bool hasLastRawValue(void);
		double lastRawValue(void);
	};
	
	// -----------------------------------------------------------------
	
	class OneEuroFilter {
		
		double freq ;
		double mincutoff ;
		double beta_ ;
		double dcutoff ;
		LowPassFilter *x ;
		LowPassFilter *dx ;
		TimeStamp lasttime ;
		
		double alpha(double cutoff);
		void setFrequency(double f);
		void setMinCutoff(double mc);
		void setBeta(double b);
		void setDerivateCutoff(double dc);
		
	public:
		
		OneEuroFilter(double freq, double mincutoff=1.0, double beta_=0.0, double dcutoff=1.0) {
			setFrequency(freq) ;
			setMinCutoff(mincutoff) ;
			setBeta(beta_) ;
			setDerivateCutoff(dcutoff) ;
			x = new LowPassFilter(alpha(mincutoff)) ;
			dx = new LowPassFilter(alpha(dcutoff)) ;
			lasttime = UndefinedTime ;
		}
		
		~OneEuroFilter(void) {
			delete x ;
			delete dx ;
		}
		
		double filter(double value, TimeStamp timestamp=UndefinedTime);
		
	} ;
	
}

#endif
